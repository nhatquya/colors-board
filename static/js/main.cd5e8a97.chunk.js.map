{"version":3,"sources":["constants.tsx","BoardSquare.tsx","Board.tsx","utils.js","App.tsx","serviceWorker.ts","index.tsx"],"names":["COLOR_PLATE","ITEM_TYPE","Object","freeze","BOARD_SQUARE","boardSquareStyle","color","opacity","position","width","height","boxShadow","backgroundColor","BoardSquare","props","swapSquare","ref","useRef","useDrag","item","type","data","collect","monitor","isDragging","drag","useDrop","accept","canDrop","drop","isOver","style","className","boardStyle","display","flexWrap","Board","squares","boardSize","x","y","variations","reshader","numberOfVariations","contrastRatio","push","all","prepareBoardSquares","useState","boardSquares","setBoardSquares","source","target","sourceIndex","findIndex","targetIndex","newBoardSquares","tmpSquare","map","square","key","renderSquare","wrapperStyle","textAlign","containerStyle","border","margin","App","DndProvider","backend","Backend","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.cd5e8a97.chunk.js","sourcesContent":["export const COLOR_PLATE = [\r\n  \"#660000\",\r\n  \"#663300\",\r\n  \"#666600\",\r\n  \"#336600\",\r\n  \"#006600\",\r\n  \"#006633\",\r\n  \"#006666\",\r\n  \"#003366\",\r\n];\r\n\r\nexport const ITEM_TYPE = Object.freeze({\r\n  BOARD_SQUARE: \"BOARD_SQUARE\",\r\n});\r\n","import React, { useRef } from \"react\";\r\nimport { useDrag, useDrop } from \"react-dnd\";\r\nimport { ITEM_TYPE } from \"./constants\";\r\n\r\nexport interface Position {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\ninterface BoardSquareProps {\r\n  position: Position;\r\n  color: string;\r\n  swapSquare: (source: Position, target: Position) => void;\r\n}\r\n\r\nconst boardSquareStyle = (color: string, opacity: number) =>\r\n  ({\r\n    position: \"relative\",\r\n    width: \"12.5%\",\r\n    height: \"12.5%\",\r\n    boxShadow: \"inset 0px 0px 0px 0.3px #000\",\r\n    backgroundColor: color,\r\n    opacity,\r\n  } as React.CSSProperties);\r\n\r\nconst BoardSquare: React.FC<BoardSquareProps> = (props) => {\r\n  const { color, position, swapSquare } = props;\r\n  const ref = useRef(null);\r\n\r\n  const [{ isDragging }, drag] = useDrag({\r\n    item: { type: ITEM_TYPE.BOARD_SQUARE, data: position },\r\n    collect: (monitor) => ({\r\n      isDragging: !!monitor.isDragging(),\r\n    }),\r\n  });\r\n\r\n  const [{ isOver }, drop] = useDrop({\r\n    accept: ITEM_TYPE.BOARD_SQUARE,\r\n    canDrop: (item: any) => item !== position,\r\n    drop: (item: any) => {\r\n      swapSquare(item.data, position);\r\n    },\r\n    collect: (monitor) => ({\r\n      isOver: !!monitor.isOver(),\r\n      canDrop: !!monitor.canDrop(),\r\n    }),\r\n  });\r\n\r\n  const opacity = isDragging || isOver ? 0.5 : 1;\r\n  drag(drop(ref));\r\n  return (\r\n    <div\r\n      ref={ref}\r\n      style={boardSquareStyle(color, opacity)}\r\n      className=\"board-square\"\r\n    />\r\n  );\r\n};\r\n\r\nexport default BoardSquare;\r\n","import React, { useState } from \"react\";\r\nimport BoardSquare, { Position } from \"./BoardSquare\";\r\nimport { prepareBoardSquares } from \"./utils\";\r\n\r\nconst BOARD_SIZE = 8;\r\n\r\nconst boardStyle: React.CSSProperties = {\r\n  width: \"100%\",\r\n  height: \"100%\",\r\n  display: \"flex\",\r\n  flexWrap: \"wrap\",\r\n};\r\n\r\nexport interface BoardSquare {\r\n  x: number;\r\n  y: number;\r\n  color: string;\r\n}\r\n\r\nfunction renderSquare(\r\n  square: BoardSquare,\r\n  swapSquare: (source: Position, target: Position) => void\r\n) {\r\n  const { x, y, color } = square;\r\n  return (\r\n    <BoardSquare\r\n      key={`x-${x}-y${y}`}\r\n      position={{ x, y }}\r\n      color={color}\r\n      swapSquare={swapSquare}\r\n    />\r\n  );\r\n}\r\n\r\nconst Board: React.FC = () => {\r\n  const squares = prepareBoardSquares(BOARD_SIZE);\r\n  const [boardSquares, setBoardSquares] = useState(squares);\r\n\r\n  const swapSquare = (source: Position, target: Position) => {\r\n    const sourceIndex = boardSquares.findIndex(\r\n      (item) => item.x === source.x && item.y === source.y\r\n    );\r\n    const targetIndex = boardSquares.findIndex(\r\n      (item) => item.x === target.x && item.y === target.y\r\n    );\r\n    const newBoardSquares = [...boardSquares];\r\n    const tmpSquare = { ...newBoardSquares[sourceIndex] };\r\n    newBoardSquares[sourceIndex].color = newBoardSquares[targetIndex].color;\r\n    newBoardSquares[targetIndex].color = tmpSquare.color;\r\n    setBoardSquares(newBoardSquares);\r\n  };\r\n\r\n  return (\r\n    <div style={boardStyle}>\r\n      {boardSquares.map((item) => renderSquare(item, swapSquare))}\r\n    </div>\r\n  );\r\n};\r\nexport default Board;\r\n","import reshader from \"reshader\";\r\nimport { COLOR_PLATE } from \"./constants\";\r\n\r\nexport const prepareBoardSquares  = (boardSize) => {\r\n  const squares = [];\r\n  for (let x = 0; x < boardSize; x++) {\r\n    for (let y = 0; y < boardSize; y++) {\r\n      const { variations } = reshader(COLOR_PLATE[y], {\r\n        numberOfVariations: boardSize,\r\n        contrastRatio: 0.2\r\n      });\r\n      squares.push({ x, y, color: variations.all[x] });\r\n    }\r\n  }\r\n  return squares;\r\n};\r\nexport default {};\r\n","import React from \"react\";\r\nimport { DndProvider } from \"react-dnd\";\r\nimport Backend from \"react-dnd-html5-backend\";\r\n\r\nimport Board from \"./Board\";\r\n\r\nconst wrapperStyle: React.CSSProperties = {\r\n  textAlign: \"center\",\r\n};\r\n\r\nconst containerStyle = {\r\n  width: 500,\r\n  height: 500,\r\n  border: \"1px solid gray\",\r\n  margin: \"0 auto\",\r\n};\r\n\r\nfunction App() {\r\n  return (\r\n    <div style={wrapperStyle}>\r\n      <h2>Colors Board</h2>\r\n      <div style={containerStyle}>\r\n        <DndProvider backend={Backend}>\r\n          <Board />\r\n        </DndProvider>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}